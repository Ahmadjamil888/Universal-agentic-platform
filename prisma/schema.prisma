// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  organizations OrganizationMember[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String               @id @default(cuid())
  name        String
  slug        String               @unique
  members     OrganizationMember[]
  agents      Agent[]
  workflows   Workflow[]
  apiKeys     ApiKey[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  role           String       @default("MEMBER") // OWNER, ADMIN, MEMBER
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([organizationId, userId])
}

model Agent {
  id             String      @id @default(cuid())
  name           String
  description    String?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  modelProvider  String      // gemini, deepseek, etc.
  modelName      String      // gemini-pro, deepseek-chat, etc.
  config         Json        // Model-specific configuration
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Workflow {
  id             String      @id @default(cuid())
  name           String
  description    String?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  steps          Json        // Array of workflow steps
  isActive       Boolean     @default(true)
  executions     WorkflowExecution[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model WorkflowExecution {
  id          String    @id @default(cuid())
  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId  String
  status      String    // PENDING, RUNNING, COMPLETED, FAILED
  inputData   Json?     // Input data for the workflow
  outputData  Json?     // Output data from the workflow
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
}

model ApiKey {
  id             String      @id @default(cuid())
  name           String
  keyPrefix      String
  keyHash        String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  lastUsedAt     DateTime?
  createdAt      DateTime    @default(now())
}
